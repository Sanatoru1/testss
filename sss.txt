! кмп - компонент

jsx - расширение синтаксиса js для описания ui
props - способ передания данных от родительского кмп к дочернему, не изменяемы и используются  для настройки кмп
// для кмп обязательно нужен род элемент

состояние - нечто позволяющие кмп изменять внутреннее данные 
и позволяет изменять props(переданные от род кмп)

хуки - спец  функ которые позволяют  подключаться к возможности react, таким как состояние/методы жизненного цикла
из функц кмп, наиболее распространненых хуки - useState и userSearch  
хук useEffect  выполняет функцию на разных стадиях жизни кмп, т.е заменят такие методы классовых кмп
как  "componentDidMount", "componentDidUpdate", "componentWillAmount"  
/ useState -> позволяет менять состояние кмп при опредленном событии(наипростейший пример счетчика)
/ useEffect -> позволяет менять состояние кмп всегда 

корневой элемент (react) - наличие рендера у приложения 

использование JSX для рендера в корневой элемент является
ключевым для работы приложения. Реакт использует Реакт Дом
(виртуальный дом для рендеринга элементов в корневой элемент)

root - пользовательский кмп который на прямую взаимодействует с виртуальным домом с помощью
React Dom, исходя из выше перечилсенного можно понять что он может менять настоящий Dom, в следствии
этого react приложение производит свою загрузку


о том, как родительские и дочерние элемент взаимодействуют друг с другом:
взаимодействие  компонентов состоит из дерева компонентов, где один кмп может включать в себя другие компненты
это помогает строить интерфейсы которые легко поддерживать и маштабировать, 

// свойство props - не изменяемо
пропс передается компоненту/родителям и не может изменяться внутри компонента. Это делает компоненты предсказуемыми
и помогает избежать неожиданных ошибок, если нужно изменить данные то изменять их придется на уровне родительского 
компонента и передать новые значения через новые пропс которые создаются через состояние, а состояние(state) 
в свою очередь изменяемо. Состояние может изменяться в течении времени, это позволяет компоненту реагировать 
на любые пользовательские действия, такие как: нажатие кнопок, ввод данных и тд 

// не изменять состояние НА ПРЯМУЮ 
// обновление  состояний должно быть ассинхронно, поэтому Реакт может обьединять несколько вызовов обновления 
для производительности. Изменение состояний свойств это ключевая часть создание  лучших интерфейсов в реакте


/// рендеринг
процесс отображения компонента на экране в реакт рендеринг происходит когда мы используем React Dom Render
для добавления компонентов в корневой элемент, это может быть как статический рендеринг так и динамический
/ в каждом компоненте обязателен родительский элемент
Рендеринг компонентов это основной способ отображения данных в реакте

// условный рендеринг
позволяет отображать разные элементы, в зависимости от предоставленных условий
есть похожие черты с else if из JS  или тернарных операторов


// рендер списков
В React рендеринг списков выполняется с помощью метода .map(), который позволяет пройтись по массиву данных и 
создать кмп для каждого элемента. 

// key 
key в react - специальный атрибут который React использует для отслеживания, какие элементы изменились,
были добавленны или определены. Ключи помогают React эффективно обновлять и миннимизировать кол-во повторных
рендеров и при рендеринге списков важно использовать уникальный ключ, чтобы React мог индефицировать каждый элемент
либо с id либо с методом .map() создаете отдельный аргумент индекс и используете как ключ для правильной работы компонента


// Жизненный цикл компонентов 
особенно важно при работе с классовыми компонентами, т.к они представляют методы для контроля поведения компонентов на
разных этапах его существования, также для поддержки старых  приложений написанных на более старых версиях React

основные стадии жизненного цикла  у компонента react проходит в несколько стадий, это: 
●монтирование
●обновление
●размонтирование

1 монтирование компонента - вызывается метод "название метода" этод метод полезен для  выполенения кода который должен быть
выполнен после того как кмп будет вставлен в DOM
 
// Формы в реакте 
в react, форма обычно является управлениями компанентами т.е react обрабатывает состояние формы и
обновляет его при изменении ввода 



компонент -  независимая и переиспользуемая часть интерфейса,
которая отвечает за собственное состояние и отображение
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

функциональный кмп - обычная js функция которая возращает jsx синтаксис;
классовый кмп - "остались" в 14й версии реакта, используются в ооп;


// события в react - 

css модули - те же ccs файлы которые автоматически создают  уникальные классы для предотвращения конфликтов
имен. Подключат их к компонентам с помощью import 
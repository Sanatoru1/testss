<-------------------------------------------------------->
// –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—ã—Ç–∏–π. 
function  InputHandler() {
    const  [InputValue, setInputValue] = useState('');
    const handleChange = (event) => {
        setInputValue(event.target.value);
    }
    return (
        <>
            <input type="text" value={InputValue} onChange={handleChange} />
            <p>–í—ã –≤–≤–µ–ª–∏ {InputValue}</p>
        </>
    )
}


<-------------------------------------------------------->
// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è / –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 
function ClickButton() {
        const handleclick = () => {
            console.log('–∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
        }
        return <button onClick={handleclick}>click me</button>
}

<-------------------------------------------------------->
import React, { useState } from "react";
//* –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –∏ –ø–æ—á—Ç—ã
function MultiValidation () {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–æ—Ä–º—ã
    const [formData, setFormData ] = useState({
        email: '',
        password: '',
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const [errors, setErrors] = useState({});

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleChange = (event) => {
        const { name, value } = event.target;
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–æ—Ä–º—ã
        setFormData({
            ...formData,
            [name]: value
        });
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const handleSubmit = (event) => {
        event.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã

        const newErrors = {}; // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–±–æ—Ä–∞ –æ—à–∏–±–æ–∫

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if (!formData.email.includes('@')) {
            newErrors.email = '–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ—á—Ç–∞'; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        if (formData.password.length < 6) {
            newErrors.password = '–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
        } else {
            // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî –æ—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            setErrors({});
            alert('—Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
        }
    };

    return (
        <>
            <form onSubmit={handleSubmit} className="forma">
                <label>
                    <h2>email:</h2> 
                    <input
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                    />
                </label>
                {/* –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –ø–æ–¥ email (üö´ –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∏–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞) */}
                {errors.email && <p style={{ color: "red" }}>{errors.email}</p>}

                <label>
                    <h2>password:</h2>
                    <input
                        type="password"
                        name="password"
                        value={formData.password}
                        onChange={handleChange}
                    />
                </label>
                {/* –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –ø–æ–¥ password */}
                {errors.password && <p style={{ color: "red" }}>{errors.password}</p>}

                <button type="submit">–æ—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </form>
        </>
    );
}


//* –ª–µ–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
// function SimpleValidation() {
//     const [name, setName ] = useState('');
//     const [error, setError] = useState('');

//     const handleChange = (event) => {
//         setName(event.target.value);
//     }

//     const  handleSubmit = (event) => {
//         if(!name) {
//             setError('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
//         } else {
//             setError('');
//             alert(`–ò–º—è: ${name}`);
//         }
//         event.preventDefault();
//     }
//     return(
//         <>
//             <form onSubmit={handleSubmit}>
//                 <label htmlFor="">
//                      <p>Name:</p>
//                     <input type="text" value={name} onChange={handleChange} />
//                 </label>
//                 {error && <p style={{color: "red"}}>error</p>}
//                 <button type="submit">–æ—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//             </form>
//         </>
//     )
// }

 //* –æ–±—ã—á–Ω–∞—è —Ñ–æ—Ä–º–∞
// function MultiForm() {
//     const [formData, setFormData] = useState({
//         firstName: "",
//         lastName: ""
//     }); 

//     const handleChange = (event) => {
//         const { name, value } = event.target;
//         setFormData({ 
//             ...formData,
//             [name]: value
//         });
//     };

//     const handleSubmit = (event) => {
//         event.preventDefault();
//         alert(`Name: ${formData.firstName} ${formData.lastName}`);
//     };

//     return (
//         <>
//             <form onSubmit={handleSubmit}>
//                 <label>
//                      <p>Name:</p>
//                     <input 
//                         type="text" 
//                         name="firstName" 
//                         value={formData.firstName}  
//                         onChange={handleChange}
//                     />
//                 </label>
//                 <label>
//                     <p>Last Name:</p>
//                     <input 
//                         type="text" 
//                         name="lastName" 
//                         value={formData.lastName}  
//                         onChange={handleChange}
//                     />
//                 </label>        
//                 <button type="submit">Send</button>
//             </form>
//         </>
//     );
// }



<-------------------------------------------------------->

import React, { useState } from "react";
// –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ñ–æ—Ä–º—ã
function NameForm() {
    const [name, setName] = useState("");
    const handleChange = (event) => {
        setName(event.target.value);
    };
    const handleSubmit = (event) => {
        alert(`Name : ${name}`);
        event.preventDefult(); //? –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å 'default' –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è
    };
    return (
        <>
            <form onSubmit={handleSubmit}>
                <label htmlFor="">
                    Name:
                    <input type="text" value={name} onChange={handleChange} />
                </label>
                <button type="submit">jnghdbnm</button>
            </form>
        </>
    );
}

<-------------------------------------------------------->

import React, { useEffect, useState } from "react";

function Timer() {
    const [seconds, setSecods] = useState(0);
    useEffect(() => {
        const interval = setInterval(() => {
            setSecods(prevSeconds => prevSeconds + 1);
        }, 1000);
        return () => clearInterval(interval);
    }) 
    return (
        <>
        <p>Timer: {seconds} second</p>
        </>
    )
}

<-------------------------------------------------------->

import React, { useState } from "react";

function Counter() {
    const [count, setCount] = useState(0) 
    return(
        <>
            <p>counter: {count}</p>
            <button onClick={() => setCount(count + 1)}>click me</button>
        </> 
    )  
}

<-------------------------------------------------------->

// –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import React from 'react';

class Welcome extends React.Component{
    componentDidMount(){
        console.log('sss');
        
    }
    render() {
        return <h1>lorem ipsum</h1>
    }
}


<-------------------------------------------------------->

// —Ä–µ–Ω–¥–µ—Ä key
const NameList = () =>{
    const names =  ['doni' , 'satoshi', 'beka'];
    return(
        <ul>
            {names.map((name, index) => (
                <li key={index}>{name}</li>
            ))}
        </ul>
    )
}

<-------------------------------------------------------->

const ProductList = () => {
    const products = [
        {id: 1, name: 'Samsung 0', price: '500$'},
        {id: 2, name: 'Samsung 233', price: '667$'},
        {id: 3, name: 'Samsung 777', price: '420$'},
        {id: 4, name: 'Samsung 1610', price: '1010$'},
    ]
    return (
        <ul>
            {products.map((product => (
                <li key={product.id}>{product.name} : {product.price}</li>
            )))}
        </ul>
    )
}

// 



const NameList = () => {
    const names = ["Doni", "Dima", "Beka", "Senya"];
    return (
        <ul>
            {names.map((name, index) => (
                <li key={index}>{name}</li>
                // –≤ –º–µ–¥–æ—Ç–µ .map() –º—ã —Ä–∞–∑–±–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –∏–º—è –∏ –∏–Ω–¥–µ–∫—Å, —á—Ç–æ–±—ã —Ç–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –≤ –∫–ª—é—á–µ, –ø–æ—Ç–æ–º –≤—ã–≤–æ–¥–∏–º –∏—Ö –∏–∑ –º–∞—Å—Å–∏–≤–∞
            ))}
        </ul>
    );
};


// –£—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–æ–ø—Å—ã 347 1:15

<-------------------------------------------------------->


// import { useState } from "react";
// function Counter(){
//     const [count, setCount] = useState   // –•—É–∫(?) –≤ —Ä–µ–∞–∫—Ç–µ, –∏–∑–º–µ–Ω—è—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω—É–∂–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å–≤—Ç–∏–∏
//     return(
//         <div>
//             <p>–≤—ã –Ω–∞–∂–∞–ª–∏ {count} —Ä–∞–∑</p>
//             <button onClick={() => setCount(count + 1)}>–Ω–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</button>
//         </div>
//     )
// }

// function CustomButton () {
//     return <button>–Ω–∞–∂–º–∏ —Å—é–¥–∞</button>
// }


<-------------------------------------------------------->

import  { useState } from "react";

const Toggle = () =>{
    const  [isOn, setIsOn] =  useState(true);
    return (
        <button onClick={() => setIsOn(!isOn)}>
            {isOn ?  '–í–∫–ª—é—á–µ–Ω–æ' : "–í—ã–∫–ª—é—á–µ–Ω–æ" }
        </button>
            // if isOn = true –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞(–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∫–Ω–æ–ø–∫–∏) –∏ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞–æ–±–æ—Ä–æ—Ç
        // func isOn –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å false –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å—Å—è –∏ –≤ true —Ç–æ–∂–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞
        // –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å JS –∫–æ–¥ –≤ {}
    )
}


const Greeting = (props) => {
    return <h1>hi {props.name} </h1>
}
